From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Wed, 6 Jul 2022 23:00:31 -0400
Subject: [PATCH] Paper Plugins


diff --git a/src/main/java/io/papermc/paper/command/PaperCommands.java b/src/main/java/io/papermc/paper/command/PaperCommands.java
index 37d28625b9528bbe0cd6d9623e702bbbc2b07883..ab9a00b60eed9da7e61feda90a69563a7ae8d05c 100644
--- a/src/main/java/io/papermc/paper/command/PaperCommands.java
+++ b/src/main/java/io/papermc/paper/command/PaperCommands.java
@@ -23,5 +23,6 @@ public final class PaperCommands {
         COMMANDS.forEach((s, command) -> {
             server.server.getCommandMap().register(s, "Paper", command);
         });
+        server.server.getCommandMap().register("bukkit", new PaperPluginsCommand());
     }
 }
diff --git a/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java b/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..434cdcaed998c469b9ce9207d3a4681437cb632c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java
@@ -0,0 +1,217 @@
+package io.papermc.paper.command;
+
+import com.google.common.collect.Lists;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.ProviderStatus;
+import io.papermc.paper.plugin.provider.ProviderStatusHolder;
+import io.papermc.paper.plugin.provider.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.service.storage.plugin.ServerPluginProviderStorage;
+import io.papermc.paper.plugin.provider.type.JavaPluginProvider;
+import io.papermc.paper.plugin.provider.type.paper.PaperPluginParentProvider;
+import io.papermc.paper.plugin.provider.type.spigot.SpigotPluginProvider;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.JoinConfiguration;
+import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.event.ClickEvent;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.format.TextColor;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.command.defaults.BukkitCommand;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeMap;
+
+public class PaperPluginsCommand extends BukkitCommand {
+
+    private static final TextColor INFO_COLOR = TextColor.color(52, 159, 218);
+
+    // TODO: LINK?
+    private static final Component SERVER_PLUGIN_INFO = Component.text("ℹ What is a server plugin?", INFO_COLOR)
+        .append(asPlainComponents("""
+            Server plugins can add new behavior to your server!
+            You can find new plugins on Paper's plugin repository, Hangar.
+                        
+            <link to hangar>
+            """));
+
+    private static final Component SERVER_INITIALIZER_INFO = Component.text("ℹ What is a server initializer?", INFO_COLOR)
+        .append(asPlainComponents("""
+            Server initializers are ran before your server
+            starts and are provided by paper plugins.
+            """));
+
+    private static final Component LEGACY_PLUGIN_INFO = Component.text("ℹ What is a legacy plugin?", INFO_COLOR)
+        .append(asPlainComponents("""
+            A legacy plugin is a plugin that was made on
+            very old unsupported versions of the game.
+                        
+            It is encouraged that you replace this plugin,
+            as they might not work in the future and may cause
+            performance issues.
+            """));
+
+    private static final Component INFO_ICON_START = Component.text("ℹ ", INFO_COLOR);
+
+    private static final Component PAPER_HEADER = Component.text("Paper Plugins:", TextColor.color(2, 136, 209));
+    private static final Component BUKKIT_HEADER = Component.text("Bukkit Plugins:", TextColor.color(237, 129, 6));
+
+    private static final Component PLUGIN_TICK = Component.text("- ", NamedTextColor.DARK_GRAY);
+    private static final Component PLUGIN_TICK_EMPTY = Component.text(" ");
+
+    private static final Component LEGACY_PLUGIN_STAR = Component.text('*', TextColor.color(255, 212, 42))
+        .hoverEvent(LEGACY_PLUGIN_INFO);
+
+    public PaperPluginsCommand() {
+        super("plugins");
+        this.description = "Gets a list of plugins running on the server";
+        this.usageMessage = "/plugins";
+        this.setPermission("bukkit.command.plugins");
+        this.setAliases(Arrays.asList("pl"));
+    }
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
+        if (!this.testPermission(sender)) return true;
+
+        // Plugins
+        {
+            TreeMap<String, PluginProvider<JavaPlugin>> paperPlugins = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
+            TreeMap<String, PluginProvider<JavaPlugin>> spigotPlugins = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
+
+            for (PluginProvider<JavaPlugin> provider : ServerPluginProviderStorage.INSTANCE.getRegisteredProviders()) {
+                PluginConfiguration configuration = provider.getConfiguration();
+
+                if (provider instanceof SpigotPluginProvider) {
+                    spigotPlugins.put(configuration.getDisplayName(), provider);
+                } else if (provider instanceof PaperPluginParentProvider.PaperServerPluginProvider) {
+                    paperPlugins.put(configuration.getDisplayName(), provider);
+                }
+            }
+
+            sender.sendMessage(INFO_ICON_START.hoverEvent(SERVER_PLUGIN_INFO).append(Component.text("Server Plugins (%s):".formatted(paperPlugins.size() + spigotPlugins.size()), NamedTextColor.WHITE)));
+            sender.sendMessage(PAPER_HEADER);
+            for (Component component : formatProviders(paperPlugins)) {
+                sender.sendMessage(component);
+            }
+            sender.sendMessage(BUKKIT_HEADER);
+            for (Component component : formatProviders(spigotPlugins)) {
+                sender.sendMessage(component);
+            }
+
+        }
+
+        // Providers
+        /*
+        {
+            TreeMap<String, PluginProvider<Initializer>> providers = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
+            for (PluginProvider<Initializer> provider : PreInitProviderStorage.INSTANCE.getRegisteredProviders()) {
+                providers.put(provider.getConfiguration().getIdentifier(), provider);
+            }
+
+            sender.sendMessage(INFO_ICON_START.hoverEvent(SERVER_INITIALIZER_INFO).append(Component.text("Server Initializers (%s):".formatted(providers.size()), NamedTextColor.WHITE)));
+            sender.sendMessage(formatProviders(providers));
+
+        }
+         */
+        return true;
+    }
+
+    @NotNull
+    @Override
+    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    private static <T> List<Component> formatProviders(TreeMap<String, PluginProvider<T>> plugins) {
+        List<Component> components = new ArrayList<>(plugins.size());
+        for (Map.Entry<String, PluginProvider<T>> entry : plugins.entrySet()) {
+            components.add(formatProvider(entry.getValue()));
+        }
+
+        boolean isFirst = true;
+        List<Component> formattedSublists = new ArrayList<>();
+        /*
+        Split up the plugin list for each 10 plugins to get size down
+
+        Plugin List:
+        - Plugin 1, Plugin 2, .... Plugin 10,
+          Plugin 11, Plugin 12 ... Plugin 20,
+         */
+        for (List<Component> componentSublist : Lists.partition(components, 10)) {
+            Component component = Component.space();
+            if (isFirst) {
+                component = component.append(PLUGIN_TICK);
+                isFirst = false;
+            } else {
+                component = PLUGIN_TICK_EMPTY;
+                //formattedSublists.add(Component.empty()); // Add an empty line, the auto chat wrapping and this makes it quite jarring.
+            }
+
+            formattedSublists.add(component.append(Component.join(JoinConfiguration.commas(true), componentSublist)));
+        }
+
+        return formattedSublists;
+    }
+
+    private static Component formatProvider(PluginProvider<?> provider) {
+        TextComponent.Builder builder = Component.text();
+        if (provider instanceof SpigotPluginProvider spigotPluginProvider && spigotPluginProvider.isLegacy()) {
+            builder.append(LEGACY_PLUGIN_STAR);
+        }
+
+        String name = provider.getConfiguration().getIdentifier();
+        Component pluginName = Component.text(name, fromStatus(provider))
+            .clickEvent(ClickEvent.runCommand("/version " + name));
+
+        builder.append(pluginName);
+
+        return builder.build();
+    }
+
+    private static Component asPlainComponents(String strings) {
+        net.kyori.adventure.text.TextComponent.Builder builder = Component.text();
+        for (String string : strings.split("\n")) {
+            builder.append(Component.newline());
+            builder.append(Component.text(string, NamedTextColor.WHITE));
+        }
+
+        return builder.build();
+    }
+
+    private static TextColor fromStatus(PluginProvider<?> provider) {
+        if (provider instanceof ProviderStatusHolder statusHolder && statusHolder.getLastProvidedStatus() != null) {
+            ProviderStatus status = statusHolder.getLastProvidedStatus();
+
+            // Handle enabled/disabled game plugins
+            if (status == ProviderStatus.INITIALIZED && provider instanceof JavaPluginProvider javaPluginProvider) {
+                Plugin plugin = Bukkit.getPluginManager().getPlugin(javaPluginProvider.getConfiguration().getIdentifier());
+                // Plugin doesn't exist? Could be due to it being removed.
+                if (plugin == null) {
+                    return NamedTextColor.RED;
+                }
+
+                return plugin.isEnabled() ? NamedTextColor.GREEN : NamedTextColor.RED;
+            }
+
+            return switch (status) {
+                case INITIALIZED -> NamedTextColor.GREEN;
+                case ERRORED -> NamedTextColor.RED;
+            };
+        } else if (provider instanceof PaperPluginParentProvider.PaperServerPluginProvider serverPluginProvider && serverPluginProvider.shouldSkipCreation()) {
+            // Paper plugins will be skipped if their provider is skipped due to their initializer failing.
+            // Show them as red
+            return NamedTextColor.RED;
+        } else {
+            return NamedTextColor.GRAY;
+        }
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/ProviderStatus.java b/src/main/java/io/papermc/paper/plugin/provider/ProviderStatus.java
new file mode 100644
index 0000000000000000000000000000000000000000..3f29ba87ce732024f08c56347c98fc26bee99837
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/ProviderStatus.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.plugin.provider;
+
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Internal
+public enum ProviderStatus {
+    INITIALIZED,
+    ERRORED,
+    ;
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/ProviderStatusHolder.java b/src/main/java/io/papermc/paper/plugin/provider/ProviderStatusHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..94023e8b7f5011d4962e7859dd8771ab02f6dc11
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/ProviderStatusHolder.java
@@ -0,0 +1,8 @@
+package io.papermc.paper.plugin.provider;
+
+public interface ProviderStatusHolder {
+
+    ProviderStatus getLastProvidedStatus();
+
+    void setStatus(ProviderStatus status);
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginConfiguration.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..dbd8c29ce95bdb36af4b897f5b476b83a72626a6
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginConfiguration.java
@@ -0,0 +1,198 @@
+package io.papermc.paper.plugin.provider.configuration;
+
+import com.google.common.collect.ImmutableList;
+import io.papermc.paper.configuration.constraint.Constraint;
+import io.papermc.paper.configuration.serializer.EnumValueSerializer;
+import io.papermc.paper.configuration.serializer.collections.MapSerializer;
+import io.papermc.paper.plugin.provider.configuration.serializer.constraints.PluginConfigConstraints;
+import io.papermc.paper.plugin.provider.configuration.type.PaperCommandMap;
+import org.bukkit.permissions.PermissionDefault;
+import org.bukkit.plugin.PluginLoadOrder;
+import org.spongepowered.configurate.CommentedConfigurationNode;
+import org.spongepowered.configurate.ConfigurateException;
+import org.spongepowered.configurate.loader.HeaderMode;
+import org.spongepowered.configurate.objectmapping.ConfigSerializable;
+import org.spongepowered.configurate.objectmapping.ObjectMapper;
+import org.spongepowered.configurate.objectmapping.meta.Required;
+import org.spongepowered.configurate.yaml.NodeStyle;
+import org.spongepowered.configurate.yaml.YamlConfigurationLoader;
+
+import java.io.BufferedReader;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+@ConfigSerializable
+public class PaperPluginConfiguration implements PluginConfiguration {
+
+    @PluginConfigConstraints.PluginName
+    @Required
+    private String name = null;
+    private List<String> provides = List.of();
+    @Required
+    @PluginConfigConstraints.PluginNameSpace
+    private String main = null;
+    @PluginConfigConstraints.PluginNameSpace
+    private String boostrapper = null;
+    @PluginConfigConstraints.PluginNameSpace
+    private String loader = null;
+    private String classLoaderOf = null;
+    private List<String> depend = List.of();
+    private List<String> softDepend = List.of();
+    private List<String> loadBefore = List.of();
+    @Required
+    private String version = null;
+    private PaperCommandMap commandMap = new PaperCommandMap();
+    private String description = null;
+    private List<String> authors = List.of();
+    private List<String> contributors = List.of();
+    private String website = null;
+    private String prefix = null;
+    private PluginLoadOrder load = PluginLoadOrder.POSTWORLD;
+    //private List<Permission> permissions = null;
+    //private Map<?, ?> lazyPermissions = null;
+    private PermissionDefault defaultPerm = PermissionDefault.OP;
+    //private Set<PluginAwareness> awareness = ImmutableSet.of();
+    private String apiVersion = null;
+
+    private List<String> libraries = ImmutableList.of();
+
+    public static PaperPluginConfiguration create(BufferedReader reader) throws ConfigurateException {
+        YamlConfigurationLoader loader = YamlConfigurationLoader.builder()
+            .indent(2)
+            .nodeStyle(NodeStyle.BLOCK)
+            .headerMode(HeaderMode.NONE)
+            .source(() -> reader)
+            .defaultOptions((options) -> {
+                return options.serializers((serializers) -> {
+                    serializers
+                        .register(new EnumValueSerializer())
+                        .register(PaperCommandMap.SERIALIZER)
+                        .register(MapSerializer.TYPE, new MapSerializer(false))
+                        .registerAnnotatedObjects(
+                            ObjectMapper.factoryBuilder()
+                                .addConstraint(Constraint.class, new Constraint.Factory())
+                                .addConstraint(PluginConfigConstraints.PluginName.class, String.class, new PluginConfigConstraints.PluginName.Factory()).build()
+                        );
+                });
+            })
+            .build();
+        CommentedConfigurationNode node = loader.load();
+        PaperPluginConfiguration pluginConfiguration = node.require(PaperPluginConfiguration.class);
+
+        // TODO: a better way to do this?
+        if (node.getString("author") != null) {
+            if (pluginConfiguration.authors.isEmpty()) {
+                pluginConfiguration.authors = new ArrayList<>();
+            }
+
+            pluginConfiguration.authors.add(node.getString("author"));
+        }
+
+        return pluginConfiguration;
+    }
+
+
+    @Override
+    public String getIdentifier() {
+        return this.name;
+    }
+
+    @Override
+    public String getMain() {
+        return this.main;
+    }
+
+    @Override
+    public String getVersion() {
+        return this.version;
+    }
+
+    @Override
+    public String getDisplayName() {
+        return this.name.replaceAll("_", " ");
+    }
+
+    @Override
+    public String getLoggingPrefix() {
+        return this.prefix;
+    }
+
+    @Override
+    public List<String> getHardDependencies() {
+        return this.depend;
+    }
+
+    @Override
+    public List<String> getSoftDependencies() {
+        return this.softDepend;
+    }
+
+    @Override
+    public List<String> getLoadBefore() {
+        return this.loadBefore;
+    }
+
+    @Override
+    public PluginLoadOrder getLoadOrder() {
+        return this.load;
+    }
+
+    @Override
+    public boolean isTransitiveDependency(PluginConfiguration other) {
+        return true;
+    }
+
+    @Override
+    public Map<String, Map<String, Object>> getRawCommands() {
+        return this.commandMap.getMap();
+    }
+
+    @Override
+    public String getDescription() {
+        return this.description;
+    }
+
+    @Override
+    public List<String> getAuthors() {
+        return this.authors;
+    }
+
+    @Override
+    public List<String> getContributors() {
+        return this.contributors;
+    }
+
+    @Override
+    public String getWebsite() {
+        return this.website;
+    }
+
+    @Override
+    public Map<?, ?> getLazyPermissions() {
+        return Map.of();
+    }
+
+    @Override
+    public PermissionDefault getDefaultPermission() {
+        return this.defaultPerm;
+    }
+
+    @Override
+    public String getApiVersion() {
+        return this.apiVersion;
+    }
+
+    @Override
+    public List<String> getProvides() {
+        return this.provides;
+    }
+
+    public String getBoostrapper() {
+        return this.boostrapper;
+    }
+
+    public String getLoader() {
+        return this.loader;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/constraints/PluginConfigConstraints.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/constraints/PluginConfigConstraints.java
new file mode 100644
index 0000000000000000000000000000000000000000..faf027ea0dba4b98e43d6f86d9b81056cf85cf5b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/serializer/constraints/PluginConfigConstraints.java
@@ -0,0 +1,53 @@
+package io.papermc.paper.plugin.provider.configuration.serializer.constraints;
+
+import org.spongepowered.configurate.objectmapping.meta.Constraint;
+import org.spongepowered.configurate.serialize.SerializationException;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import java.lang.reflect.Type;
+import java.util.regex.Pattern;
+
+public final class PluginConfigConstraints {
+
+    @Documented
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.FIELD)
+    public @interface PluginName {
+
+        final class Factory implements Constraint.Factory<PluginName, String> {
+
+            private static final Pattern VALID_NAME = Pattern.compile("^[A-Za-z0-9 _.-]+$");
+
+            @Override
+            public Constraint<String> make(PluginName data, Type type) {
+                return value -> {
+                    if (value != null && !VALID_NAME.matcher(value).matches()) {
+                        throw new SerializationException("name '" + value + "' contains invalid characters.");
+                    }
+                };
+            }
+        }
+    }
+
+    @Documented
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.FIELD)
+    public @interface PluginNameSpace {
+
+        final class Factory implements Constraint.Factory<PluginName, String> {
+
+            @Override
+            public Constraint<String> make(PluginName data, Type type) {
+                return value -> {
+                    if (value != null && value.startsWith("org.bukkit.")) {
+                        throw new SerializationException("main may not be within the org.bukkit namespace");
+                    }
+                };
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/type/PaperCommandMap.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/type/PaperCommandMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..314cfd14b0632e4b4f7f2ec1dbd977b0d1e331ff
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/type/PaperCommandMap.java
@@ -0,0 +1,70 @@
+package io.papermc.paper.plugin.provider.configuration.type;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import org.spongepowered.configurate.serialize.ScalarSerializer;
+import org.spongepowered.configurate.serialize.SerializationException;
+
+import java.lang.reflect.Type;
+import java.util.Map;
+import java.util.function.Predicate;
+
+public class PaperCommandMap {
+
+    public static final Serializer SERIALIZER = new Serializer();
+
+    private final Map<String, Map<String, Object>> map;
+
+    public PaperCommandMap() {
+        this.map = Map.of();
+    }
+
+    public PaperCommandMap(Map<?, ?> data) throws SerializationException {
+        ImmutableMap.Builder<String, Map<String, Object>> commandsBuilder = ImmutableMap.builder();
+        try {
+            for (Map.Entry<?, ?> command : data.entrySet()) {
+                ImmutableMap.Builder<String, Object> commandBuilder = ImmutableMap.builder();
+                if (command.getValue() != null) {
+                    for (Map.Entry<?, ?> commandEntry : ((Map<?, ?>) command.getValue()).entrySet()) {
+                        if (commandEntry.getValue() instanceof Iterable) {
+                            // This prevents internal alias list changes
+                            ImmutableList.Builder<Object> commandSubList = ImmutableList.builder();
+                            for (Object commandSubListItem : (Iterable<?>) commandEntry.getValue()) {
+                                if (commandSubListItem != null) {
+                                    commandSubList.add(commandSubListItem);
+                                }
+                            }
+                            commandBuilder.put(commandEntry.getKey().toString(), commandSubList.build());
+                        } else if (commandEntry.getValue() != null) {
+                            commandBuilder.put(commandEntry.getKey().toString(), commandEntry.getValue());
+                        }
+                    }
+                }
+                commandsBuilder.put(command.getKey().toString(), commandBuilder.build());
+            }
+        } catch (ClassCastException ex) {
+            throw new SerializationException("commands are of wrong type");
+        }
+        this.map = commandsBuilder.build();
+    }
+
+    public Map<String, Map<String, Object>> getMap() {
+        return this.map;
+    }
+
+    private static final class Serializer extends ScalarSerializer<PaperCommandMap> {
+        private Serializer() {
+            super(PaperCommandMap.class);
+        }
+
+        @Override
+        public PaperCommandMap deserialize(Type type, Object obj) throws SerializationException {
+            return new PaperCommandMap((Map<?, ?>) obj);
+        }
+
+        @Override
+        protected Object serialize(PaperCommandMap item, Predicate<Class<?>> typeSupported) {
+            return item.getMap();
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/loader/PaperClasspathBuilder.java b/src/main/java/io/papermc/paper/plugin/provider/loader/PaperClasspathBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..af58d53c3249ef77b2e7cf92ff5d5bc1f6296169
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/loader/PaperClasspathBuilder.java
@@ -0,0 +1,51 @@
+package io.papermc.paper.plugin.provider.loader;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.loader.library.ClassPathLibrary;
+import io.papermc.paper.plugin.provider.loader.library.PaperLibraryStore;
+import io.papermc.paper.plugin.provider.service.classloader.PaperPluginClassLoader;
+import io.papermc.paper.plugin.provider.service.classloader.PaperPluginClassLoaderStorage;
+import org.bukkit.plugin.java.JavaPlugin;
+
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.nio.file.Path;
+import java.util.ArrayList;
+import java.util.List;
+
+public class PaperClasspathBuilder implements PluginClasspathBuilder {
+
+    private final List<ClassPathLibrary> libraries = new ArrayList<>();
+
+    @Override
+    public PluginClasspathBuilder addLibrary(ClassPathLibrary classPathLibrary) {
+        this.libraries.add(classPathLibrary);
+        return this;
+    }
+
+    public ClassLoader buildClassLoader(PluginProvider<?> provider) {
+        PaperLibraryStore paperLibraryStore = new PaperLibraryStore();
+        for (ClassPathLibrary library : this.libraries) {
+            library.addToLibraryStore(paperLibraryStore);
+        }
+
+        List<Path> paths = paperLibraryStore.getPaths();
+        URL[] urls = new URL[paths.size()];
+        for (int i = 0; i < paths.size(); i++) {
+            Path path = paperLibraryStore.getPaths().get(i);
+            try {
+                urls[i] = path.toUri().toURL();
+            } catch (MalformedURLException e) {
+                throw new AssertionError(e);
+            }
+        }
+
+        try {
+            return new PaperPluginClassLoader(PaperPluginClassLoaderStorage.INSTANCE, provider, this.getClass().getClassLoader(), new URLClassLoader(urls));
+        } catch (IOException exception) {
+            throw new RuntimeException(exception);
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/loader/library/PaperLibraryStore.java b/src/main/java/io/papermc/paper/plugin/provider/loader/library/PaperLibraryStore.java
new file mode 100644
index 0000000000000000000000000000000000000000..a519e629d22a5a27d739aea8810a8eac926d09ce
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/loader/library/PaperLibraryStore.java
@@ -0,0 +1,19 @@
+package io.papermc.paper.plugin.provider.loader.library;
+
+import java.nio.file.Path;
+import java.util.ArrayList;
+import java.util.List;
+
+public class PaperLibraryStore implements LibraryStore {
+
+    private final List<Path> paths = new ArrayList<>();
+
+    @Override
+    public void addLibrary(Path library) {
+        this.paths.add(library);
+    }
+
+    public List<Path> getPaths() {
+        return this.paths;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/storage/PreInitProviderStorage.java b/src/main/java/io/papermc/paper/plugin/provider/service/storage/PreInitProviderStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..fa1c960b437799fe2e7aea8b4b568b8a03aa3403
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/storage/PreInitProviderStorage.java
@@ -0,0 +1,27 @@
+package io.papermc.paper.plugin.provider.service.storage;
+
+import io.papermc.paper.plugin.PluginBootstrap;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.ProviderStatus;
+import io.papermc.paper.plugin.provider.ProviderStatusHolder;
+
+import java.util.logging.Level;
+
+public class PreInitProviderStorage extends SimpleProviderStorage<PluginBootstrap> {
+
+    public static final PreInitProviderStorage INSTANCE = new PreInitProviderStorage();
+
+
+    public void init() {
+        for (PluginProvider<PluginBootstrap> provider : this.providers) {
+            try {
+                provider.createInstance().boostrap();
+            } catch (Exception e) {
+                provider.getLogger().log(Level.SEVERE, "Failed to run initializer for %s in %s. This plugin will not be loaded.".formatted(provider.getFileName(), provider.getParentSource()), e);
+                if (provider instanceof ProviderStatusHolder statusHolder) {
+                    statusHolder.setStatus(ProviderStatus.ERRORED);
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/storage/SimpleProviderStorage.java b/src/main/java/io/papermc/paper/plugin/provider/service/storage/SimpleProviderStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..77e048d9292fe3b1b207504bac6fb9420cbef4a6
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/storage/SimpleProviderStorage.java
@@ -0,0 +1,25 @@
+package io.papermc.paper.plugin.provider.service.storage;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public abstract class SimpleProviderStorage<T> implements ProviderStorage<T> {
+
+    protected final List<PluginProvider<T>> providers = new ArrayList<>();
+
+    @Override
+    public void register(PluginProvider<T> provider) {
+        this.providers.add(provider);
+    }
+
+    public List<PluginProvider<T>> registered() {
+        return this.providers;
+    }
+
+    @Override
+    public Iterable<PluginProvider<T>> getRegisteredProviders() {
+        return this.providers;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/ServerPluginProviderStorage.java b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/ServerPluginProviderStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..20af1c474c7e3be78aa5f151a4fd322f0f55c727
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/ServerPluginProviderStorage.java
@@ -0,0 +1,36 @@
+package io.papermc.paper.plugin.provider.service.storage.plugin;
+
+import io.papermc.paper.configuration.GlobalConfiguration;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.service.storage.SimpleProviderStorage;
+import io.papermc.paper.plugin.provider.service.storage.plugin.strategy.PluginLoadingStrategy;
+import io.papermc.paper.plugin.provider.service.storage.plugin.strategy.impl.LegacyPluginLoadingStrategy;
+import io.papermc.paper.plugin.provider.service.storage.plugin.strategy.impl.ModernPluginLoadingStrategy;
+import io.papermc.paper.plugin.provider.type.paper.PaperPluginParentProvider;
+import org.bukkit.plugin.java.JavaPlugin;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ServerPluginProviderStorage extends SimpleProviderStorage<JavaPlugin> {
+
+    public static final ServerPluginProviderStorage INSTANCE = new ServerPluginProviderStorage();
+
+    public void loadAll() {
+
+        PluginLoadingStrategy strategy = switch (GlobalConfiguration.get().misc.pluginLoadingStrategy) {
+            case MODERN -> ModernPluginLoadingStrategy.INSTANCE;
+            case LEGACY -> LegacyPluginLoadingStrategy.INSTANCE;
+        };
+
+
+        List<PluginProvider<JavaPlugin>> providerList = new ArrayList<>(this.providers);
+        /*
+        Have to do this to prevent loading plugin providers that have failed initializers.
+        This is a hack and a better solution here would be to store failed plugin providers elsewhere.
+         */
+        providerList.removeIf((provider) -> (provider instanceof PaperPluginParentProvider.PaperServerPluginProvider pluginProvider && pluginProvider.shouldSkipCreation()));
+        strategy.loadPlugins(providerList);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/PluginLoadingStrategy.java b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/PluginLoadingStrategy.java
new file mode 100644
index 0000000000000000000000000000000000000000..1f7970d642f67143072179f33d147c9684f268dc
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/PluginLoadingStrategy.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.plugin.provider.service.storage.plugin.strategy;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+import org.bukkit.plugin.java.JavaPlugin;
+
+import java.util.List;
+import java.util.logging.Logger;
+
+public interface PluginLoadingStrategy {
+
+    void loadPlugins(List<PluginProvider<JavaPlugin>> plugins);
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/GraphCycleException.java b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/GraphCycleException.java
new file mode 100644
index 0000000000000000000000000000000000000000..7bcfed842aa197b1bfb25da2e521eb3d1be07770
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/GraphCycleException.java
@@ -0,0 +1,4 @@
+package io.papermc.paper.plugin.provider.service.storage.plugin.strategy.impl;
+
+public class GraphCycleException extends Exception {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/JohnsonSimpleCycles.java b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/JohnsonSimpleCycles.java
new file mode 100644
index 0000000000000000000000000000000000000000..468548632b2f98f4f8b2a15f282851b65369bb91
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/JohnsonSimpleCycles.java
@@ -0,0 +1,344 @@
+/*
+ * (C) Copyright 2013-2021, by Nikolay Ognyanov and Contributors.
+ *
+ * JGraphT : a free Java graph-theory library
+ *
+ * See the CONTRIBUTORS.md file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the
+ * GNU Lesser General Public License v2.1 or later
+ * which is available at
+ * http://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR LGPL-2.1-or-later
+ */
+
+// MODIFICATIONS:
+// - Modified to use a guava graph directly
+
+package io.papermc.paper.plugin.provider.service.storage.plugin.strategy.impl;
+
+import com.google.common.base.Preconditions;
+import com.google.common.graph.Graph;
+import com.google.common.graph.GraphBuilder;
+import com.google.common.graph.MutableGraph;
+import com.mojang.datafixers.util.Pair;
+
+import java.util.*;
+import java.util.function.Consumer;
+
+/**
+ * Find all simple cycles of a directed graph using the Johnson's algorithm.
+ *
+ * <p>
+ * See:<br>
+ * D.B.Johnson, Finding all the elementary circuits of a directed graph, SIAM J. Comput., 4 (1975),
+ * pp. 77-84.
+ *
+ * @param <V> the vertex type.
+ *
+ * @author Nikolay Ognyanov
+ */
+public class JohnsonSimpleCycles<V>
+{
+    // The graph.
+    private Graph<V> graph;
+
+    // The main state of the algorithm.
+    private Consumer<List<V>> cycleConsumer = null;
+    private V[] iToV = null;
+    private Map<V, Integer> vToI = null;
+    private Set<V> blocked = null;
+    private Map<V, Set<V>> bSets = null;
+    private ArrayDeque<V> stack = null;
+
+    // The state of the embedded Tarjan SCC algorithm.
+    private List<Set<V>> foundSCCs = null;
+    private int index = 0;
+    private Map<V, Integer> vIndex = null;
+    private Map<V, Integer> vLowlink = null;
+    private ArrayDeque<V> path = null;
+    private Set<V> pathSet = null;
+
+    /**
+     * Create a simple cycle finder for the specified graph.
+     *
+     * @param graph - the DirectedGraph in which to find cycles.
+     *
+     * @throws IllegalArgumentException if the graph argument is <code>
+     * null</code>.
+     */
+    public JohnsonSimpleCycles(Graph<V> graph)
+    {
+        Preconditions.checkState(graph.isDirected(), "Graph must be directed");
+        this.graph = graph;
+    }
+
+    /**
+     * Find the simple cycles of the graph.
+     *
+     * @return The list of all simple cycles. Possibly empty but never <code>null</code>.
+     */
+    public List<List<V>> findSimpleCycles()
+    {
+        List<List<V>> result = new ArrayList<>();
+        findSimpleCycles(result::add);
+        return result;
+    }
+
+    /**
+     * Find the simple cycles of the graph.
+     *
+     * @param consumer Consumer that will be called with each cycle found.
+     */
+    public void findSimpleCycles(Consumer<List<V>> consumer)
+    {
+        if (graph == null) {
+            throw new IllegalArgumentException("Null graph.");
+        }
+        initState(consumer);
+
+        int startIndex = 0;
+        int size = graph.nodes().size();
+        while (startIndex < size) {
+            Pair<Graph<V>, Integer> minSCCGResult = findMinSCSG(startIndex);
+            if (minSCCGResult != null) {
+                startIndex = minSCCGResult.getSecond();
+                Graph<V> scg = minSCCGResult.getFirst();
+                V startV = toV(startIndex);
+                for (V v : scg.successors(startV)) {
+                    blocked.remove(v);
+                    getBSet(v).clear();
+                }
+                findCyclesInSCG(startIndex, startIndex, scg);
+                startIndex++;
+            } else {
+                break;
+            }
+        }
+
+        clearState();
+    }
+
+    private Pair<Graph<V>, Integer> findMinSCSG(int startIndex)
+    {
+        /*
+         * Per Johnson : "adjacency structure of strong component $K$ with least vertex in subgraph
+         * of $G$ induced by $(s, s + 1, n)$". Or in contemporary terms: the strongly connected
+         * component of the subgraph induced by $(v_1, \dotso ,v_n)$ which contains the minimum
+         * (among those SCCs) vertex index. We return that index together with the graph.
+         */
+        initMinSCGState();
+
+        List<Set<V>> foundSCCs = findSCCS(startIndex);
+
+        // find the SCC with the minimum index
+        int minIndexFound = Integer.MAX_VALUE;
+        Set<V> minSCC = null;
+        for (Set<V> scc : foundSCCs) {
+            for (V v : scc) {
+                int t = toI(v);
+                if (t < minIndexFound) {
+                    minIndexFound = t;
+                    minSCC = scc;
+                }
+            }
+        }
+        if (minSCC == null) {
+            return null;
+        }
+
+        // build a graph for the SCC found
+        MutableGraph<V> dependencyGraph = GraphBuilder.directed().allowsSelfLoops(true).build();
+
+        for (V v : minSCC) {
+            for (V w : minSCC) {
+                if (graph.hasEdgeConnecting(v, w)) {
+                    dependencyGraph.putEdge(v, w);
+                }
+            }
+        }
+
+        Pair<Graph<V>, Integer> result = Pair.of(dependencyGraph, minIndexFound);
+        clearMinSCCState();
+        return result;
+    }
+
+    private List<Set<V>> findSCCS(int startIndex)
+    {
+        // Find SCCs in the subgraph induced
+        // by vertices startIndex and beyond.
+        // A call to StrongConnectivityAlgorithm
+        // would be too expensive because of the
+        // need to materialize the subgraph.
+        // So - do a local search by the Tarjan's
+        // algorithm and pretend that vertices
+        // with an index smaller than startIndex
+        // do not exist.
+        for (V v : graph.nodes()) {
+            int vI = toI(v);
+            if (vI < startIndex) {
+                continue;
+            }
+            if (!vIndex.containsKey(v)) {
+                getSCCs(startIndex, vI);
+            }
+        }
+        List<Set<V>> result = foundSCCs;
+        foundSCCs = null;
+        return result;
+    }
+
+    private void getSCCs(int startIndex, int vertexIndex)
+    {
+        V vertex = toV(vertexIndex);
+        vIndex.put(vertex, index);
+        vLowlink.put(vertex, index);
+        index++;
+        path.push(vertex);
+        pathSet.add(vertex);
+
+        Set<V> edges = graph.successors(vertex);
+        for (V successor : edges) {
+            int successorIndex = toI(successor);
+            if (successorIndex < startIndex) {
+                continue;
+            }
+            if (!vIndex.containsKey(successor)) {
+                getSCCs(startIndex, successorIndex);
+                vLowlink.put(vertex, Math.min(vLowlink.get(vertex), vLowlink.get(successor)));
+            } else if (pathSet.contains(successor)) {
+                vLowlink.put(vertex, Math.min(vLowlink.get(vertex), vIndex.get(successor)));
+            }
+        }
+        if (vLowlink.get(vertex).equals(vIndex.get(vertex))) {
+            Set<V> result = new HashSet<>();
+            V temp;
+            do {
+                temp = path.pop();
+                pathSet.remove(temp);
+                result.add(temp);
+            } while (!vertex.equals(temp));
+            if (result.size() == 1) {
+                V v = result.iterator().next();
+                if (graph.edges().contains(vertex)) {
+                    foundSCCs.add(result);
+                }
+            } else {
+                foundSCCs.add(result);
+            }
+        }
+    }
+
+    private boolean findCyclesInSCG(int startIndex, int vertexIndex, Graph<V> scg)
+    {
+        /*
+         * Find cycles in a strongly connected graph per Johnson.
+         */
+        boolean foundCycle = false;
+        V vertex = toV(vertexIndex);
+        stack.push(vertex);
+        blocked.add(vertex);
+
+        for (V successor : scg.successors(vertex)) {
+            int successorIndex = toI(successor);
+            if (successorIndex == startIndex) {
+                List<V> cycle = new ArrayList<>(stack.size());
+                stack.descendingIterator().forEachRemaining(cycle::add);
+                cycleConsumer.accept(cycle);
+                foundCycle = true;
+            } else if (!blocked.contains(successor)) {
+                boolean gotCycle = findCyclesInSCG(startIndex, successorIndex, scg);
+                foundCycle = foundCycle || gotCycle;
+            }
+        }
+        if (foundCycle) {
+            unblock(vertex);
+        } else {
+            for (V w : scg.successors(vertex)) {
+                Set<V> bSet = getBSet(w);
+                bSet.add(vertex);
+            }
+        }
+        stack.pop();
+        return foundCycle;
+    }
+
+    private void unblock(V vertex)
+    {
+        blocked.remove(vertex);
+        Set<V> bSet = getBSet(vertex);
+        while (bSet.size() > 0) {
+            V w = bSet.iterator().next();
+            bSet.remove(w);
+            if (blocked.contains(w)) {
+                unblock(w);
+            }
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    private void initState(Consumer<List<V>> consumer)
+    {
+        cycleConsumer = consumer;
+        iToV = (V[]) graph.nodes().toArray();
+        vToI = new HashMap<>();
+        blocked = new HashSet<>();
+        bSets = new HashMap<>();
+        stack = new ArrayDeque<>();
+
+        for (int i = 0; i < iToV.length; i++) {
+            vToI.put(iToV[i], i);
+        }
+    }
+
+    private void clearState()
+    {
+        cycleConsumer = null;
+        iToV = null;
+        vToI = null;
+        blocked = null;
+        bSets = null;
+        stack = null;
+    }
+
+    private void initMinSCGState()
+    {
+        index = 0;
+        foundSCCs = new ArrayList<>();
+        vIndex = new HashMap<>();
+        vLowlink = new HashMap<>();
+        path = new ArrayDeque<>();
+        pathSet = new HashSet<>();
+    }
+
+    private void clearMinSCCState()
+    {
+        index = 0;
+        foundSCCs = null;
+        vIndex = null;
+        vLowlink = null;
+        path = null;
+        pathSet = null;
+    }
+
+    private Integer toI(V vertex)
+    {
+        return vToI.get(vertex);
+    }
+
+    private V toV(Integer i)
+    {
+        return iToV[i];
+    }
+
+    private Set<V> getBSet(V v)
+    {
+        // B sets typically not all needed,
+        // so instantiate lazily.
+        return bSets.computeIfAbsent(v, k -> new HashSet<>());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/LegacyPluginLoadingStrategy.java b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/LegacyPluginLoadingStrategy.java
new file mode 100644
index 0000000000000000000000000000000000000000..720893d852ff1971f5719e67e360f13634a74d2b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/LegacyPluginLoadingStrategy.java
@@ -0,0 +1,247 @@
+package io.papermc.paper.plugin.provider.service.storage.plugin.strategy.impl;
+
+import com.google.common.graph.GraphBuilder;
+import com.google.common.graph.MutableGraph;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.service.storage.plugin.strategy.PluginLoadingStrategy;
+import org.bukkit.plugin.UnknownDependencyException;
+import org.bukkit.plugin.java.JavaPlugin;
+
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class LegacyPluginLoadingStrategy implements PluginLoadingStrategy {
+
+    private static final Logger LOGGER = Logger.getLogger("LegacyPluginLoadingStrategy");
+    public static final LegacyPluginLoadingStrategy INSTANCE = new LegacyPluginLoadingStrategy();
+
+    @Override
+    public void loadPlugins(List<PluginProvider<JavaPlugin>> providers) {
+        MutableGraph<String> dependencyGraph = GraphBuilder.directed().build();
+
+        Map<String, PluginProvider<JavaPlugin>> providersToLoad = new HashMap<>();
+        Set<String> loadedPlugins = new HashSet<>();
+        Map<String, String> pluginsProvided = new HashMap<>();
+        Map<String, Collection<String>> dependencies = new HashMap<>();
+        Map<String, Collection<String>> softDependencies = new HashMap<>();
+
+        for (PluginProvider<JavaPlugin> provider : providers) {
+            PluginConfiguration configuration = provider.getConfiguration();
+
+            PluginProvider<JavaPlugin> replacedProvider = providersToLoad.put(configuration.getIdentifier(), provider);
+            if (replacedProvider != null) {
+                LOGGER.severe(String.format(
+                    "Ambiguous plugin name `%s' for files `%s' and `%s' in `%s'",
+                    configuration.getIdentifier(),
+                    provider.getSource(),
+                    replacedProvider.getSource(),
+                    replacedProvider.getParentSource()
+                ));
+            }
+
+            String removedProvided = pluginsProvided.remove(configuration.getIdentifier());
+            if (removedProvided != null) {
+                LOGGER.warning(String.format(
+                    "Ambiguous plugin name `%s'. It is also provided by `%s'",
+                    configuration.getIdentifier(),
+                    removedProvided
+                ));
+            }
+
+            for (String provided : configuration.getProvides()) {
+                PluginProvider<JavaPlugin> pluginProvider = providersToLoad.get(provided);
+
+                if (pluginProvider != null) {
+                    LOGGER.warning(String.format(
+                        "`%s provides `%s' while this is also the name of `%s' in `%s'",
+                        provider.getSource(),
+                        provided,
+                        pluginProvider.getSource(),
+                        provider.getParentSource()
+                    ));
+                } else {
+                    String replacedPlugin = pluginsProvided.put(provided, configuration.getIdentifier());
+                    if (replacedPlugin != null) {
+                        LOGGER.warning(String.format(
+                            "`%s' is provided by both `%s' and `%s'",
+                            provided,
+                            configuration.getIdentifier(),
+                            replacedPlugin
+                        ));
+                    }
+                }
+            }
+
+            Collection<String> softDependencySet = configuration.getSoftDependencies();
+            if (softDependencySet != null && !softDependencySet.isEmpty()) {
+                if (softDependencies.containsKey(configuration.getIdentifier())) {
+                    // Duplicates do not matter, they will be removed together if applicable
+                    softDependencies.get(configuration.getIdentifier()).addAll(softDependencySet);
+                } else {
+                    softDependencies.put(configuration.getIdentifier(), new LinkedList<String>(softDependencySet));
+                }
+
+                for (String depend : softDependencySet) {
+                    dependencyGraph.putEdge(configuration.getIdentifier(), depend);
+                }
+            }
+
+            Collection<String> dependencySet = configuration.getHardDependencies();
+            if (dependencySet != null && !dependencySet.isEmpty()) {
+                dependencies.put(configuration.getIdentifier(), new LinkedList<String>(dependencySet));
+
+                for (String depend : dependencySet) {
+                    dependencyGraph.putEdge(configuration.getIdentifier(), depend);
+                }
+            }
+
+            Collection<String> loadBeforeSet = configuration.getLoadBefore();
+            if (loadBeforeSet != null && !loadBeforeSet.isEmpty()) {
+                for (String loadBeforeTarget : loadBeforeSet) {
+                    if (softDependencies.containsKey(loadBeforeTarget)) {
+                        softDependencies.get(loadBeforeTarget).add(configuration.getIdentifier());
+                    } else {
+                        // softDependencies is never iterated, so 'ghost' plugins aren't an issue
+                        Collection<String> shortSoftDependency = new LinkedList<String>();
+                        shortSoftDependency.add(configuration.getIdentifier());
+                        softDependencies.put(loadBeforeTarget, shortSoftDependency);
+                    }
+
+                    dependencyGraph.putEdge(loadBeforeTarget, configuration.getIdentifier());
+                }
+            }
+        }
+
+        while (!providersToLoad.isEmpty()) {
+            boolean missingDependency = true;
+            Iterator<Map.Entry<String, PluginProvider<JavaPlugin>>> providerIterator = providersToLoad.entrySet().iterator();
+
+            while (providerIterator.hasNext()) {
+                Map.Entry<String, PluginProvider<JavaPlugin>> entry = providerIterator.next();
+                String providerIdentifier = entry.getKey();
+
+                if (dependencies.containsKey(providerIdentifier)) {
+                    Iterator<String> dependencyIterator = dependencies.get(providerIdentifier).iterator();
+                    final Set<String> missingHardDependencies = new HashSet<>(dependencies.get(providerIdentifier).size()); // Paper - list all missing hard depends
+
+                    while (dependencyIterator.hasNext()) {
+                        String dependency = dependencyIterator.next();
+
+                        // Dependency loaded
+                        if (loadedPlugins.contains(dependency)) {
+                            dependencyIterator.remove();
+
+                            // We have a dependency not found
+                        } else if (!providersToLoad.containsKey(dependency) && !pluginsProvided.containsKey(dependency)) {
+                            // Paper start
+                            missingHardDependencies.add(dependency);
+                        }
+                    }
+                    if (!missingHardDependencies.isEmpty()) {
+                        // Paper end
+                        missingDependency = false;
+                        providerIterator.remove();
+                        pluginsProvided.values().removeIf(s -> s.equals(providerIdentifier)); // Paper - remove provided plugins
+                        softDependencies.remove(providerIdentifier);
+                        dependencies.remove(providerIdentifier);
+
+                        LOGGER.log(
+                            Level.SEVERE,
+                            "Could not load '" + entry.getValue().getSource() + "' in folder '" + entry.getValue().getParentSource() + "'", // Paper
+                            new UnknownDependencyException(missingHardDependencies, providerIdentifier)); // Paper
+                    }
+
+                    if (dependencies.containsKey(providerIdentifier) && dependencies.get(providerIdentifier).isEmpty()) {
+                        dependencies.remove(providerIdentifier);
+                    }
+                }
+                if (softDependencies.containsKey(providerIdentifier)) {
+                    Iterator<String> softDependencyIterator = softDependencies.get(providerIdentifier).iterator();
+
+                    while (softDependencyIterator.hasNext()) {
+                        String softDependency = softDependencyIterator.next();
+
+                        // Soft depend is no longer around
+                        if (!providersToLoad.containsKey(softDependency) && !pluginsProvided.containsKey(softDependency)) {
+                            softDependencyIterator.remove();
+                        }
+                    }
+
+                    if (softDependencies.get(providerIdentifier).isEmpty()) {
+                        softDependencies.remove(providerIdentifier);
+                    }
+                }
+                if (!(dependencies.containsKey(providerIdentifier) || softDependencies.containsKey(providerIdentifier)) && providersToLoad.containsKey(providerIdentifier)) {
+                    // We're clear to load, no more soft or hard dependencies left
+                    PluginProvider<JavaPlugin> file = providersToLoad.get(providerIdentifier);
+                    providerIterator.remove();
+                    pluginsProvided.values().removeIf(s -> s.equals(providerIdentifier)); // Paper - remove provided plugins
+                    missingDependency = false;
+
+                    try {
+                        JavaPlugin loadedPlugin = file.createInstance();
+
+                        LOGGER.info(String.format("Loading server plugin %s", file.getConfiguration().getDisplayName()));
+                        loadedPlugins.add(loadedPlugin.getConfiguration().getIdentifier());
+                        loadedPlugins.addAll(loadedPlugin.getDescription().getProvides());
+                        loadedPlugin.onLoad();
+                        continue;
+                    } catch (Exception ex) {
+                        LOGGER.log(Level.SEVERE, "Could not load '" + file.getSource() + "' in folder '" + file.getParentSource() + "'", ex); // Paper
+                    }
+                }
+            }
+
+            if (missingDependency) {
+                // We now iterate over plugins until something loads
+                // This loop will ignore soft dependencies
+                providerIterator = providersToLoad.entrySet().iterator();
+
+                while (providerIterator.hasNext()) {
+                    Map.Entry<String, PluginProvider<JavaPlugin>> entry = providerIterator.next();
+                    String plugin = entry.getKey();
+
+                    if (!dependencies.containsKey(plugin)) {
+                        softDependencies.remove(plugin);
+                        missingDependency = false;
+                        PluginProvider<JavaPlugin> file = entry.getValue();
+                        providerIterator.remove();
+
+                        try {
+                            JavaPlugin loadedPlugin = file.createInstance();
+
+                            LOGGER.info(String.format("Loading server plugin %s", file.getConfiguration().getDisplayName()));
+                            loadedPlugins.add(loadedPlugin.getConfiguration().getIdentifier());
+                            loadedPlugins.addAll(loadedPlugin.getDescription().getProvides());
+                            loadedPlugin.onLoad();
+                            break;
+                        } catch (Exception ex) {
+                            LOGGER.log(Level.SEVERE, "Could not load '" + file.getSource() + "' in folder '" + file.getParentSource() + "'", ex); // Paper
+                        }
+                    }
+                }
+                // We have no plugins left without a depend
+                if (missingDependency) {
+                    softDependencies.clear();
+                    dependencies.clear();
+                    Iterator<PluginProvider<JavaPlugin>> failedPluginIterator = providersToLoad.values().iterator();
+
+                    while (failedPluginIterator.hasNext()) {
+                        PluginProvider<JavaPlugin> file = failedPluginIterator.next();
+                        failedPluginIterator.remove();
+                        LOGGER.log(Level.SEVERE, "Could not load '" + file.getSource() + "' in folder '" + file.getParentSource() + "': circular dependency detected"); // Paper
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/ModernPluginLoadingStrategy.java b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/ModernPluginLoadingStrategy.java
new file mode 100644
index 0000000000000000000000000000000000000000..747513aeb99875cda1d17001e3a468fb8eedbf99
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/ModernPluginLoadingStrategy.java
@@ -0,0 +1,135 @@
+package io.papermc.paper.plugin.provider.service.storage.plugin.strategy.impl;
+
+import com.google.common.collect.Lists;
+import com.google.common.graph.GraphBuilder;
+import com.google.common.graph.MutableGraph;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.configuration.PluginConfiguration;
+import io.papermc.paper.plugin.provider.service.storage.plugin.strategy.PluginLoadingStrategy;
+import org.bukkit.plugin.UnknownDependencyException;
+import org.bukkit.plugin.java.JavaPlugin;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class ModernPluginLoadingStrategy implements PluginLoadingStrategy {
+
+    private static final Logger LOGGER = Logger.getLogger("ModernPluginLoadingStrategy");
+    public static final ModernPluginLoadingStrategy INSTANCE = new ModernPluginLoadingStrategy();
+
+    @Override
+    public void loadPlugins(List<PluginProvider<JavaPlugin>> plugins) {
+        // Dependency validation
+        List<PluginProvider<JavaPlugin>> validatedProviders = new ArrayList<>();
+        Map<String, PluginProvider<JavaPlugin>> providerMap = new HashMap<>();
+        {
+            // Populate dependency set
+            for (PluginProvider<JavaPlugin> provider : plugins) {
+                PluginConfiguration providerConfig = provider.getConfiguration();
+
+                // Populate provided into a map
+                providerMap.put(providerConfig.getIdentifier(), provider);
+                for (String provides : providerConfig.getProvides()) {
+                    providerMap.put(provides, provider);
+                }
+            }
+
+            // Validate
+            for (PluginProvider<JavaPlugin> provider : plugins) {
+                PluginConfiguration providerConfiguration = provider.getConfiguration();
+
+                // Populate missing dependencies to capture if there are multiple missing ones.
+                List<String> missingDependencies = new ArrayList<>();
+                for (String hardDependency : providerConfiguration.getHardDependencies()) {
+                    if (!providerMap.containsKey(hardDependency)) {
+                        missingDependencies.add(hardDependency);
+                    }
+                }
+
+                if (missingDependencies.isEmpty()) {
+                    validatedProviders.add(provider);
+                } else {
+                    LOGGER.log(
+                        Level.SEVERE,
+                        "Could not load '%s' in '%s'".formatted(provider.getSource(), provider.getParentSource()),
+                        new UnknownDependencyException(missingDependencies, providerConfiguration.getIdentifier())); // Paper
+                }
+            }
+        }
+
+        MutableGraph<String> dependencyGraph = GraphBuilder.directed().build();
+        // Build dependency graph
+        // Build the dependencies inorder to generate a load order by topographically sorting the populated graph
+        for (PluginProvider<?> provider : validatedProviders) {
+            PluginConfiguration configuration = provider.getConfiguration();
+            String dependencyIdentifier = configuration.getIdentifier();
+
+            for (String dependency : configuration.getHardDependencies()) {
+                dependencyGraph.putEdge(dependencyIdentifier, dependency);
+            }
+
+            for (String loadBeforeTarget : configuration.getLoadBefore()) {
+                dependencyGraph.putEdge(loadBeforeTarget, dependencyIdentifier);
+            }
+
+            // Some plugins (notably GriefPrevention) have a dependency in both load before & soft depends
+            // For now, at least, properly handle this.
+            for (String dependency : configuration.getSoftDependencies()) {
+                dependencyGraph.putEdge(dependencyIdentifier, dependency);
+            }
+
+        }
+
+        // Reverse the topographic search to let us see which providers we can load first.
+        List<String> reversedTopographicSort;
+        try {
+            reversedTopographicSort = Lists.reverse(TopographicGraphSorter.sortGraph(dependencyGraph));
+        } catch (GraphCycleException e) {
+            List<String> logMessages = new ArrayList<>();
+            for (List<String> list : new JohnsonSimpleCycles<>(dependencyGraph).findSimpleCycles()) {
+                // CoolPlugin depends on Dependency depends on CoolPlugin...
+                for (int i = 0; i < list.size(); i++) {
+                    String dependency = list.get(0);
+                    if (providerMap.containsKey(dependency)) {
+                        list.set(0, "[PLUGIN] " + dependency);
+                    }
+
+                }
+                logMessages.add(String.join(" depends on ", list) + " depends on " + list.get(0) + "...");
+            }
+
+            LOGGER.log(Level.SEVERE, "Circular dependencies detected!");
+            LOGGER.log(Level.SEVERE, "You have a plugin that is depending on a plugin which refers back to that plugin. Your server will shut down until these are resolved, or the strategy is changed.");
+            LOGGER.log(Level.SEVERE, "Circular dependencies:");
+            for (String message : logMessages) {
+                LOGGER.log(Level.SEVERE, message);
+            }
+            LOGGER.log(Level.SEVERE, "If you would like to still load these plugins, acknowledging that there may be unexpected plugin loading issues, change plugin-loading-strategy in paper-global.yml to LEGACY.");
+
+            System.exit(-1);
+            return;
+        }
+
+        for (String providerIdentifier : reversedTopographicSort) {
+            // It's possible that this will be null because the above dependencies for soft/load before aren't validated if they exist.
+            // The graph could be MutableGraph<PluginProvider<JavaPlugin>>, but we would have to check if each dependency exists there... just
+            // nicer to do it here TBH.
+            PluginProvider<JavaPlugin> retrievedProvider = providerMap.get(providerIdentifier);
+            if (retrievedProvider == null) {
+                continue; // Skip provider that doesn't exist....
+            }
+
+            try {
+                JavaPlugin plugin = retrievedProvider.createInstance();
+                plugin.getLogger().info(String.format("Loading server plugin %s", plugin.getConfiguration().getDisplayName()));
+                plugin.onLoad();
+            } catch (Throwable ex) {
+                LOGGER.log(Level.WARNING, "Could not load server plugin '%s' in folder '%s' (Is it up to date?)".formatted(retrievedProvider.getFileName(), retrievedProvider.getParentSource()), ex);
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/TopographicGraphSorter.java b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/TopographicGraphSorter.java
new file mode 100644
index 0000000000000000000000000000000000000000..c10f28243b33a2737d4394df15b7a94978e06a50
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/service/storage/plugin/strategy/impl/TopographicGraphSorter.java
@@ -0,0 +1,58 @@
+package io.papermc.paper.plugin.provider.service.storage.plugin.strategy.impl;
+
+import com.google.common.graph.Graph;
+
+import java.util.ArrayDeque;
+import java.util.ArrayList;
+import java.util.Deque;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+public class TopographicGraphSorter {
+
+    // Topographically sort dependencies
+    public static <N> List<N> sortGraph(Graph<N> graph) throws GraphCycleException {
+        List<N> sorted = new ArrayList<>();
+        Deque<N> roots = new ArrayDeque<>();
+        Map<N, Integer> nonRoots = new HashMap<>();
+
+        for (N node : graph.nodes()) {
+            // Is a node being referred to by any other nodes?
+            int degree = graph.inDegree(node);
+            if (degree == 0) {
+                // Is a root
+                roots.add(node);
+            } else {
+                // Isn't a root, the number represents how many nodes connect to it.
+                nonRoots.put(node, degree);
+            }
+        }
+
+        // Pick from nodes that aren't referred to anywhere else
+        while (!roots.isEmpty()) {
+            N next = roots.remove();
+
+            for (N successor : graph.successors(next)) {
+                // Traverse through, moving down a degree
+                int newInDegree = nonRoots.get(successor) - 1;
+
+                if (newInDegree == 0) {
+                    nonRoots.remove(successor);
+                    roots.add(successor);
+                } else {
+                    nonRoots.put(successor, newInDegree);
+                }
+
+            }
+            sorted.add(next);
+        }
+
+        if (!nonRoots.isEmpty()) {
+            throw new GraphCycleException();
+        }
+
+        return sorted;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/ProviderSource.java b/src/main/java/io/papermc/paper/plugin/provider/source/ProviderSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..d8e800ca1823f83bfea061487b9c2cfb6f4e263b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/ProviderSource.java
@@ -0,0 +1,6 @@
+package io.papermc.paper.plugin.provider.source;
+
+public interface ProviderSource<C> {
+
+    void registerProviders(C context) throws Throwable;
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/Providers.java b/src/main/java/io/papermc/paper/plugin/provider/source/Providers.java
new file mode 100644
index 0000000000000000000000000000000000000000..50517236e785db42de550393fd7b32531296bb43
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/Providers.java
@@ -0,0 +1,22 @@
+package io.papermc.paper.plugin.provider.source;
+
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+/*
+A simple class for handling the registration of plugin providers.
+ */
+public class Providers {
+
+    private static final Logger LOGGER = Logger.getLogger("PluginLoading"); // Name for easier understanding
+    public static final Providers INSTANCE = new Providers();
+
+    public <C> void addProviders(ProviderSource<C> source, C context) {
+        try {
+            source.registerProviders(context);
+        } catch (Throwable e) {
+            LOGGER.log(Level.SEVERE, e.getMessage(), e);
+        }
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/impl/DirectoryProviderSource.java b/src/main/java/io/papermc/paper/plugin/provider/source/impl/DirectoryProviderSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..58424da40a56c87960542b5a8bbefc1c35ad2cc7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/impl/DirectoryProviderSource.java
@@ -0,0 +1,27 @@
+package io.papermc.paper.plugin.provider.source.impl;
+
+import io.papermc.paper.plugin.provider.source.ProviderSource;
+
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class DirectoryProviderSource implements ProviderSource<Path> {
+
+    public static final DirectoryProviderSource INSTANCE = new DirectoryProviderSource();
+    private static final Logger LOGGER = Logger.getLogger("DirectoryProviderSource");
+
+    private final FileProviderSource providerSource = new FileProviderSource(false);
+
+    @Override
+    public void registerProviders(Path context) throws Exception {
+        Files.walk(context, 1).filter(Files::isRegularFile).forEach((path) -> {
+            try {
+                this.providerSource.registerProviders(path);
+            } catch (Exception e) {
+                LOGGER.log(Level.SEVERE, "Error loading plugin: " + e.getMessage(), e);
+            }
+        });
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/impl/FileProviderSource.java b/src/main/java/io/papermc/paper/plugin/provider/source/impl/FileProviderSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..cef457e2d92905c9abbea473d341e5855febdae8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/impl/FileProviderSource.java
@@ -0,0 +1,47 @@
+package io.papermc.paper.plugin.provider.source.impl;
+
+import io.papermc.paper.plugin.provider.source.ProviderSource;
+import io.papermc.paper.plugin.provider.type.PluginFileType;
+
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.jar.JarFile;
+
+public class FileProviderSource implements ProviderSource<Path> {
+
+    private final boolean addPluginProvider;
+
+    public FileProviderSource(boolean addPluginProvider) {
+        this.addPluginProvider = addPluginProvider;
+    }
+
+    @Override
+    public void registerProviders(Path context) throws Exception {
+        String source = this.addPluginProvider ? "File '%s' specified through 'add-plugin' argument" : "File '%s'";
+        source = source.formatted(context);
+
+        if (Files.notExists(context)) {
+            throw new IllegalArgumentException(source + " does not exist, cannot load a plugin from it!");
+        }
+
+        if (!Files.isRegularFile(context)) {
+            throw new IllegalArgumentException(source + " is not a file, cannot load a plugin from it!");
+        }
+
+        if (!context.getFileName().toString().endsWith(".jar")) {
+            throw new IllegalArgumentException(source + " is not a jar file, cannot load a plugin from it!");
+        }
+
+        try {
+            JarFile file = new JarFile(context.toFile());
+            PluginFileType<?> type = PluginFileType.guessType(file);
+            if (type == null) {
+                throw new IllegalArgumentException(source + " is not a valid plugin file, cannot load a plugin from it!");
+            }
+
+            type.register(file, context);
+        } catch (Exception exception) {
+            throw new RuntimeException(source + " failed to load!", exception);
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/impl/PluginFlagProviderSource.java b/src/main/java/io/papermc/paper/plugin/provider/source/impl/PluginFlagProviderSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..226fe9e1f69e706059a5a7d3f1f3407a0c13133f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/impl/PluginFlagProviderSource.java
@@ -0,0 +1,27 @@
+package io.papermc.paper.plugin.provider.source.impl;
+
+import io.papermc.paper.plugin.provider.source.ProviderSource;
+
+import java.io.File;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class PluginFlagProviderSource implements ProviderSource<List<File>> {
+
+    public static final PluginFlagProviderSource INSTANCE = new PluginFlagProviderSource();
+    private static final Logger LOGGER = Logger.getLogger("PluginFlagProviderSource");
+
+    private final FileProviderSource providerSource = new FileProviderSource(true);
+
+    @Override
+    public void registerProviders(List<File> context) throws Throwable {
+        for (File file : context) {
+            try {
+                this.providerSource.registerProviders(file.toPath());
+            } catch (Exception e) {
+                LOGGER.log(Level.SEVERE, "Error loading plugin: " + e.getMessage(), e);
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/JavaPluginProvider.java b/src/main/java/io/papermc/paper/plugin/provider/type/JavaPluginProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..c7b16e25a140e51ef4dfbba3d036acf68dfb88b5
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/JavaPluginProvider.java
@@ -0,0 +1,7 @@
+package io.papermc.paper.plugin.provider.type;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+import org.bukkit.plugin.java.JavaPlugin;
+
+public abstract class JavaPluginProvider implements PluginProvider<JavaPlugin> {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/PluginFileType.java b/src/main/java/io/papermc/paper/plugin/provider/type/PluginFileType.java
new file mode 100644
index 0000000000000000000000000000000000000000..1ead1d7d7cc4bd5435670b6bd48b1929dd8271dd
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/PluginFileType.java
@@ -0,0 +1,66 @@
+package io.papermc.paper.plugin.provider.type;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.service.storage.PreInitProviderStorage;
+import io.papermc.paper.plugin.provider.service.storage.plugin.ServerPluginProviderStorage;
+import io.papermc.paper.plugin.provider.type.paper.PaperPluginParentProvider;
+import io.papermc.paper.plugin.provider.type.paper.PaperPluginProvider;
+import io.papermc.paper.plugin.provider.type.spigot.SpigotPluginProvider;
+import org.jetbrains.annotations.Nullable;
+
+import java.nio.file.Path;
+import java.util.List;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+public abstract class PluginFileType<T extends PluginProvider<?>> {
+
+    public static final PluginFileType<PaperPluginProvider> PAPER = new PluginFileType<>("paper-plugin.yml", PaperPluginProvider.FACTORY) {
+        @Override
+        protected void register(PaperPluginProvider provider) {
+            PaperPluginParentProvider parent = provider.createInstance();
+            if (parent.shouldCreateBootstrap()) {
+                PaperPluginParentProvider.PaperBootstrapProvider bootstrapPluginProvider = parent.createBootstrapProvider();
+
+                PreInitProviderStorage.INSTANCE.register(bootstrapPluginProvider);
+                ServerPluginProviderStorage.INSTANCE.register(parent.createPluginProvider(bootstrapPluginProvider));
+            } else {
+                ServerPluginProviderStorage.INSTANCE.register(parent.createPluginProvider());
+            }
+        }
+    };
+    public static final PluginFileType<SpigotPluginProvider> SPIGOT = new PluginFileType<>("plugin.yml", SpigotPluginProvider.FACTORY) {
+        @Override
+        protected void register(SpigotPluginProvider provider) {
+            ServerPluginProviderStorage.INSTANCE.register(provider);
+        }
+    };
+
+    private static final List<PluginFileType<?>> VALUES = List.of(PAPER, SPIGOT);
+
+    private final String config;
+    private final PluginProviderFactory<T> factory;
+
+    PluginFileType(String config, PluginProviderFactory<T> factory) {
+        this.config = config;
+        this.factory = factory;
+    }
+
+    public void register(JarFile file, Path context) throws Exception  {
+        this.register(this.factory.build(file, file.getJarEntry(this.config), context));
+    }
+
+    protected abstract void register(T provider);
+
+    @Nullable
+    public static PluginFileType<?> guessType(JarFile file) {
+        for (PluginFileType<?> type : VALUES) {
+            JarEntry entry = file.getJarEntry(type.config);
+            if (entry != null) {
+                return type;
+            }
+        }
+
+        return null;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/PluginProviderFactory.java b/src/main/java/io/papermc/paper/plugin/provider/type/PluginProviderFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..ab31b1c635f91c51b4740492817e43878b2413cf
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/PluginProviderFactory.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.plugin.provider.type;
+
+import io.papermc.paper.plugin.provider.PluginProvider;
+
+import java.nio.file.Path;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+public interface PluginProviderFactory<T extends PluginProvider<?>> {
+
+    T build(JarFile file, JarEntry config, Path source) throws Exception;
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPlugin.java b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPlugin.java
new file mode 100644
index 0000000000000000000000000000000000000000..eccc4dabf27d434a48c53a8a8562f6e9c777c3a9
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPlugin.java
@@ -0,0 +1,5 @@
+package io.papermc.paper.plugin.provider.type.paper;
+
+// Stub, unused.
+public interface PaperPlugin {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginParentProvider.java b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginParentProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..0f3e175c95ab5620fcaba7a4b1024e660565d4ed
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginParentProvider.java
@@ -0,0 +1,191 @@
+package io.papermc.paper.plugin.provider.type.paper;
+
+import com.destroystokyo.paper.util.SneakyThrow;
+import io.papermc.paper.plugin.PluginBootstrap;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.ProviderStatus;
+import io.papermc.paper.plugin.provider.ProviderStatusHolder;
+import io.papermc.paper.plugin.provider.configuration.PaperPluginConfiguration;
+import io.papermc.paper.plugin.provider.type.JavaPluginProvider;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.InvalidPluginException;
+import org.bukkit.plugin.SimplePluginManager;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.jar.JarFile;
+import java.util.logging.Logger;
+
+public class PaperPluginParentProvider {
+
+    private ProviderStatus status;
+
+    private final Path path;
+    private final JarFile jarFile;
+
+    private final PaperPluginConfiguration description;
+    private final ClassLoader classLoader;
+
+    private final Logger logger;
+
+    public PaperPluginParentProvider(Path path, JarFile jarFile, PaperPluginConfiguration description, ClassLoader classLoader, Logger logger) {
+        this.path = path;
+        this.jarFile = jarFile;
+        this.description = description;
+        this.classLoader = classLoader;
+        this.logger = logger;
+    }
+
+    public boolean shouldCreateBootstrap() {
+        return this.description.getBoostrapper() != null;
+    }
+
+    public PaperBootstrapProvider createBootstrapProvider() {
+        return new PaperBootstrapProvider();
+    }
+
+    public class PaperBootstrapProvider implements PluginProvider<PluginBootstrap>, ProviderStatusHolder {
+
+        private ProviderStatus status;
+
+        @Override
+        public @NotNull Path getSource() {
+            return PaperPluginParentProvider.this.path;
+        }
+
+        @Override
+        public JarFile file() {
+            return PaperPluginParentProvider.this.jarFile;
+        }
+
+        @Override
+        public PluginBootstrap createInstance() {
+            PluginBootstrap bootstrap = ProviderUtil.loadClass(PaperPluginParentProvider.this.description.getBoostrapper(),
+                PluginBootstrap.class, PaperPluginParentProvider.this.classLoader, PluginBootstrap::boostrap, () -> this.status = ProviderStatus.ERRORED);
+            this.status = ProviderStatus.INITIALIZED;
+            return bootstrap;
+        }
+
+        @Override
+        public PaperPluginConfiguration getConfiguration() {
+            return PaperPluginParentProvider.this.description;
+        }
+
+        @Override
+        public Logger getLogger() {
+            return PaperPluginParentProvider.this.logger;
+        }
+
+        @Override
+        public ProviderStatus getLastProvidedStatus() {
+            return this.status;
+        }
+
+        @Override
+        public void setStatus(ProviderStatus status) {
+            this.status = status;
+        }
+
+    }
+
+    public PaperServerPluginProvider createPluginProvider() {
+        return new PaperServerPluginProvider(null);
+    }
+
+    public PaperServerPluginProvider createPluginProvider(PaperBootstrapProvider provider) {
+        return new PaperServerPluginProvider(provider);
+    }
+
+    public class PaperServerPluginProvider extends JavaPluginProvider implements ProviderStatusHolder {
+
+        private final PaperBootstrapProvider bootstrapProvider;
+
+        private ProviderStatus status;
+
+        PaperServerPluginProvider(PaperBootstrapProvider bootstrapProvider) {
+            this.bootstrapProvider = bootstrapProvider;
+        }
+
+        @Override
+        public @NotNull Path getSource() {
+            return PaperPluginParentProvider.this.path;
+        }
+
+        @Override
+        public JarFile file() {
+            return PaperPluginParentProvider.this.jarFile;
+        }
+
+        @Override
+        public JavaPlugin createInstance() {
+            try {
+                JavaPlugin plugin;
+                SimplePluginManager simplePluginManager = (SimplePluginManager) Bukkit.getPluginManager();
+
+                try {
+                    Class<?> jarClass;
+                    try {
+                        jarClass = Class.forName(PaperPluginParentProvider.this.description.getMain(), true, PaperPluginParentProvider.this.classLoader);
+                    } catch (ClassNotFoundException ex) {
+                        throw new InvalidPluginException("Cannot find main class '" + PaperPluginParentProvider.this.description.getMain() + "'");
+                    }
+
+                    Class<? extends JavaPlugin> pluginClass;
+                    try {
+                        pluginClass = jarClass.asSubclass(JavaPlugin.class);
+                    } catch (ClassCastException ex) {
+                        throw new InvalidPluginException("main class `" + PaperPluginParentProvider.this.description.getMain() + "' does not extend JavaPlugin");
+                    }
+
+                    plugin = pluginClass.getDeclaredConstructor().newInstance();
+                } catch (IllegalAccessException ex) {
+                    throw new InvalidPluginException("No public constructor", ex);
+                } catch (InstantiationException ex) {
+                    throw new InvalidPluginException("Abnormal plugin type", ex);
+                } catch (Throwable ex) {
+                    throw new InvalidPluginException(ex);
+                }
+
+                simplePluginManager.loadPlugin(plugin);
+                this.status = ProviderStatus.INITIALIZED;
+                return plugin;
+            } catch (InvalidPluginException ex) {
+                this.status = ProviderStatus.ERRORED;
+                SneakyThrow.sneaky(ex);
+            }
+
+            throw new AssertionError(); // Shouldn't reach this point
+        }
+
+        @Override
+        public PaperPluginConfiguration getConfiguration() {
+            return PaperPluginParentProvider.this.description;
+        }
+
+        @Override
+        public Logger getLogger() {
+            return PaperPluginParentProvider.this.logger;
+        }
+
+        @Override
+        public ProviderStatus getLastProvidedStatus() {
+            return this.status;
+        }
+
+        @Override
+        public void setStatus(ProviderStatus status) {
+            this.status = status;
+        }
+
+        public boolean shouldSkipCreation() {
+            if (this.bootstrapProvider == null) {
+                return false;
+            }
+
+            return this.bootstrapProvider.getLastProvidedStatus() == ProviderStatus.ERRORED;
+        }
+
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginProvider.java b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..b3da98457daa98dd8b5b8547c4b7314615a765f4
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginProvider.java
@@ -0,0 +1,73 @@
+package io.papermc.paper.plugin.provider.type.paper;
+
+import com.destroystokyo.paper.utils.PaperPluginLogger;
+import io.papermc.paper.plugin.PluginLoader;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.configuration.PaperPluginConfiguration;
+import io.papermc.paper.plugin.provider.loader.PaperClasspathBuilder;
+import io.papermc.paper.plugin.provider.service.classloader.PaperSimplePluginClassLoader;
+import io.papermc.paper.plugin.provider.type.PluginProviderFactory;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.IOException;
+import java.nio.file.Path;
+import java.util.jar.JarFile;
+import java.util.logging.Logger;
+
+public class PaperPluginProvider implements PluginProvider<PaperPluginParentProvider> {
+
+    public static final PluginProviderFactory<PaperPluginProvider> FACTORY = new PaperPluginProviderFactory();
+
+    private final Path path;
+    private final PaperPluginConfiguration description;
+    private final JarFile jarFile;
+
+    private final Logger logger;
+
+    PaperPluginProvider(Path path, JarFile file, PaperPluginConfiguration configuration) throws IOException {
+        this.path = path;
+        this.jarFile = file;
+        this.description = configuration;
+        this.logger = PaperPluginLogger.getLogger(configuration);
+    }
+
+    @Override
+    public @NotNull Path getSource() {
+        return this.path;
+    }
+
+    @Override
+    public JarFile file() {
+        return this.jarFile;
+    }
+
+    @Override
+    public PaperPluginParentProvider createInstance() {
+        PaperClasspathBuilder builder = new PaperClasspathBuilder();
+
+        if (this.description.getLoader() != null) {
+            try (
+                PaperSimplePluginClassLoader simplePluginClassLoader = new PaperSimplePluginClassLoader(this, this.getClass().getClassLoader())
+            ) {
+                ProviderUtil.loadClass(this.description.getLoader(), PluginLoader.class, simplePluginClassLoader, (pluginLoader) -> {
+                    pluginLoader.classloader(builder);
+                });
+
+            } catch (IOException e) {
+                throw new RuntimeException(e);
+            }
+        }
+
+        return new PaperPluginParentProvider(this.path, this.jarFile, this.description, builder.buildClassLoader(this), this.logger);
+    }
+
+    public PaperPluginConfiguration getConfiguration() {
+        return this.description;
+    }
+
+    @Override
+    public Logger getLogger() {
+        return this.logger;
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginProviderFactory.java b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginProviderFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..bf6bdf9f4e7ec275f96ba009940ddd069655cfd5
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginProviderFactory.java
@@ -0,0 +1,28 @@
+package io.papermc.paper.plugin.provider.type.paper;
+
+import io.papermc.paper.plugin.provider.configuration.PaperPluginConfiguration;
+import io.papermc.paper.plugin.provider.type.PluginProviderFactory;
+import org.bukkit.plugin.InvalidDescriptionException;
+import org.yaml.snakeyaml.error.YAMLException;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.nio.file.Path;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+class PaperPluginProviderFactory implements PluginProviderFactory<PaperPluginProvider> {
+
+    @Override
+    public PaperPluginProvider build(JarFile file, JarEntry config, Path source) throws Exception {
+        PaperPluginConfiguration configuration;
+        try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(file.getInputStream(config)))) {
+            configuration = PaperPluginConfiguration.create(bufferedReader);
+        } catch (IOException | YAMLException ex) {
+            throw new InvalidDescriptionException(ex);
+        }
+
+        return new PaperPluginProvider(source, file, configuration);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/paper/ProviderUtil.java b/src/main/java/io/papermc/paper/plugin/provider/type/paper/ProviderUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..ed51a0a1ab4e479da18e5c5f6dcf06a6499b5a25
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/paper/ProviderUtil.java
@@ -0,0 +1,46 @@
+package io.papermc.paper.plugin.provider.type.paper;
+
+import com.destroystokyo.paper.util.SneakyThrow;
+
+import java.util.function.Consumer;
+
+public class ProviderUtil {
+
+    public static <T> T loadClass(String clazz, Class<T> classType, ClassLoader loader, Consumer<T> runnable) {
+        return loadClass(clazz, classType, loader, runnable, null);
+    }
+
+    public static <T> T loadClass(String clazz, Class<T> classType, ClassLoader loader, Consumer<T> runnable, Runnable onError) {
+        try {
+            T clazzInstance;
+
+            try {
+                Class<?> jarClass = Class.forName(clazz, true, loader);
+
+                Class<? extends T> pluginClass;
+                try {
+                    pluginClass = jarClass.asSubclass(classType);
+                } catch (ClassCastException ex) {
+                    throw new ClassCastException("class '%s' does not extend '%s'".formatted(clazz, classType));
+                }
+
+                clazzInstance = pluginClass.getDeclaredConstructor().newInstance();
+            } catch (IllegalAccessException exception) {
+                throw new RuntimeException("No public constructor");
+            } catch (InstantiationException exception) {
+                throw new RuntimeException("Abnormal plugin type", exception);
+            }
+
+            runnable.accept(clazzInstance);
+            return clazzInstance;
+        } catch (Throwable e) {
+            if (onError != null) {
+                onError.run();
+            }
+            SneakyThrow.sneaky(e);
+        }
+
+        throw new AssertionError(); // Shouldn't happen
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/spigot/SpigotPluginProvider.java b/src/main/java/io/papermc/paper/plugin/provider/type/spigot/SpigotPluginProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..9081fd066f45696575f92c4b03b15bce346a1e3f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/spigot/SpigotPluginProvider.java
@@ -0,0 +1,88 @@
+package io.papermc.paper.plugin.provider.type.spigot;
+
+import com.destroystokyo.paper.util.SneakyThrow;
+import com.destroystokyo.paper.utils.PaperPluginLogger;
+import io.papermc.paper.plugin.provider.ProviderStatus;
+import io.papermc.paper.plugin.provider.ProviderStatusHolder;
+import io.papermc.paper.plugin.provider.type.JavaPluginProvider;
+import io.papermc.paper.plugin.provider.type.PluginProviderFactory;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.InvalidPluginException;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.plugin.SimplePluginManager;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.jar.JarFile;
+import java.util.logging.Logger;
+
+public class SpigotPluginProvider extends JavaPluginProvider implements ProviderStatusHolder {
+
+    public static final PluginProviderFactory<SpigotPluginProvider> FACTORY = new SpigotPluginProviderFactory();
+
+    private ProviderStatus status;
+
+    private final Path path;
+    private final PluginDescriptionFile description;
+    private final JarFile jarFile;
+
+    private final Logger logger;
+
+    SpigotPluginProvider(Path path, JarFile file, PluginDescriptionFile description) {
+        this.path = path;
+        this.jarFile = file;
+        this.description = description;
+        this.logger = PaperPluginLogger.getLogger(description);
+    }
+
+    @Override
+    public @NotNull Path getSource() {
+        return this.path;
+    }
+
+    @Override
+    public JarFile file() {
+        return this.jarFile;
+    }
+
+    @Override
+    public JavaPlugin createInstance() {
+        try {
+            SimplePluginManager simplePluginManager = (SimplePluginManager) Bukkit.getPluginManager();
+            JavaPlugin plugin = (JavaPlugin) simplePluginManager.loader.loadPlugin(this.description, this.path.toFile());
+            simplePluginManager.loadPlugin(plugin);
+            this.status = ProviderStatus.INITIALIZED;
+            return plugin;
+        } catch (InvalidPluginException ex) {
+            this.status = ProviderStatus.ERRORED;
+            SneakyThrow.sneaky(ex);
+        }
+
+        throw new IllegalStateException(); // Shouldn't happen
+    }
+
+    @Override
+    public PluginDescriptionFile getConfiguration() {
+        return this.description;
+    }
+
+    @Override
+    public Logger getLogger() {
+        return this.logger;
+    }
+
+    @Override
+    public ProviderStatus getLastProvidedStatus() {
+        return this.status;
+    }
+
+    @Override
+    public void setStatus(ProviderStatus status) {
+        this.status = status;
+    }
+
+    public boolean isLegacy() {
+        return !Bukkit.getUnsafe().isSupportedApiVersion(this.description.getAPIVersion());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/spigot/SpigotPluginProviderFactory.java b/src/main/java/io/papermc/paper/plugin/provider/type/spigot/SpigotPluginProviderFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..b42a007c1a57bba60b2514099cb1ce6d79a6cf51
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/spigot/SpigotPluginProviderFactory.java
@@ -0,0 +1,44 @@
+package io.papermc.paper.plugin.provider.type.spigot;
+
+import io.papermc.paper.plugin.provider.type.PluginProviderFactory;
+import org.bukkit.plugin.InvalidDescriptionException;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.yaml.snakeyaml.error.YAMLException;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Path;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+class SpigotPluginProviderFactory implements PluginProviderFactory<SpigotPluginProvider> {
+
+    @Override
+    public SpigotPluginProvider build(JarFile file, JarEntry config, Path source) throws Exception {
+        PluginDescriptionFile descriptionFile;
+        try (InputStream inputStream = file.getInputStream(config)) {
+            descriptionFile = new PluginDescriptionFile(inputStream);
+        } catch (IOException | YAMLException ex) {
+            throw new InvalidDescriptionException(ex);
+        }
+
+        // TODO ORIGINAL CODE: Should I keep logging it or should this be an exception?
+//        if (name.equalsIgnoreCase("bukkit") || name.equalsIgnoreCase("minecraft") || name.equalsIgnoreCase("mojang")) {
+//            server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + file.getParentFile().getPath() + "': Restricted Name"); // Paper
+//            continue;
+//        } else if (description.rawName.indexOf(' ') != -1) {
+//            server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + file.getParentFile().getPath() + "': uses the space-character (0x20) in its name"); // Paper
+//            continue;
+//        }
+
+        String name = descriptionFile.getIdentifier();
+        if (name.equalsIgnoreCase("bukkit") || name.equalsIgnoreCase("minecraft") || name.equalsIgnoreCase("mojang")) {
+            throw new InvalidDescriptionException("Restricted name, cannot use %s as a plugin name.".formatted(name));
+        } else if (descriptionFile.getRawName().indexOf(' ') != -1) {
+            throw new InvalidDescriptionException("Restricted name, cannot use 0x20 (space character) in a plugin name.");
+        }
+
+        return new SpigotPluginProvider(source, file, descriptionFile);
+    }
+}
+
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 0a843e0afbcb1af8e2641515eb244b791b819b8c..df9f8af62f5fdea5000b042d51d20b823f7229f8 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -59,7 +59,6 @@ import org.slf4j.Logger;
 
 // CraftBukkit start
 import java.util.concurrent.atomic.AtomicReference;
-import net.minecraft.SharedConstants;
 
 public class Main {
 
@@ -105,6 +104,16 @@ public class Main {
             }
 
             Bootstrap.bootStrap();
+            // Paper start
+            io.papermc.paper.plugin.provider.source.Providers provider = io.papermc.paper.plugin.provider.source.Providers.INSTANCE;
+            File pluginfile = ((File) optionset.valueOf("plugins"));
+            provider.addProviders(io.papermc.paper.plugin.provider.source.impl.DirectoryProviderSource.INSTANCE, pluginfile.toPath());
+
+            @SuppressWarnings("unchecked")
+            java.util.List<File> files = (java.util.List<File>) optionset.valuesOf("add-plugin");
+            provider.addProviders(io.papermc.paper.plugin.provider.source.impl.PluginFlagProviderSource.INSTANCE, files);
+            io.papermc.paper.plugin.provider.service.storage.PreInitProviderStorage.INSTANCE.init();
+            // Paper end
             Bootstrap.validate();
             Util.startTimerHackThread();
             Path path = Paths.get("server.properties");
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a8cf1ab9d7504dfdb2310f1dca82324a225bea7d..ba5180b6fdee2819fdf001be537d83d18b0834db 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -410,7 +410,8 @@ public final class CraftServer implements Server {
 
     public void loadPlugins() {
         this.pluginManager.registerInterface(JavaPluginLoader.class);
-
+        io.papermc.paper.plugin.provider.service.storage.plugin.ServerPluginProviderStorage.INSTANCE.loadAll();
+        if (true) return;
         File pluginFolder = this.getPluginsFolder(); // Paper
 
         // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
index 909b2c98e7a9117d2f737245e4661792ffafb744..0aadfacf70adc48be64a8129e8a2f499f967abbc 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
@@ -42,6 +42,12 @@ public class MinecraftInternalPlugin extends PluginBase {
     public PluginDescriptionFile getDescription() {
         return pdf;
     }
+    // Paper start
+    @Override
+    public io.papermc.paper.plugin.provider.configuration.PluginConfiguration getConfiguration() {
+        return pdf;
+    }
+    // Paper end
 
     @Override
     public FileConfiguration getConfig() {
